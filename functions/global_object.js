// * Глобальный объект

/*
Глобальный объект предоставляет переменные и функции,
доступные в любом месте программы.
По умолчанию это те, что встроены в язык или среду исполнения.

В браузере он называется window, в Node.js - global.
globalThis - стандартизированное имя для глобального объекта,
которое поддерживается в любом окружении.
*/

// Ко всем всем свойствам глобального объекта можно обращаться напрямую:

alert('Привет');
// это то же самое, что и
window.alert('Привет'); // в случае c console.log работает анологично

/*
Глобальные функции и переменные, объявленные с помощью var,
становятся свойствами глобального объекта:
*/

var num = 5;
alert(window.num); // 5

/*
Не рекомендуется объявлять переменные таким образом, это поведение
поддерживается для совместимости.

Если свойство настолько важное, что вы хотите сделать его доступным для всей программы,
запишите его в глобальный объект напрямую:
*/

window.currentUser = {
  name: 'John',
};

alert(currentUser.name); // 'John'
alert(window.currentUser.name); // 'John'

/* 
Функции, объявленные с помощью синтаксиса Function Declaration тоже
становятся свойствами глобального объекта
*/

/*
Обычно не рекомендуется использовать глобальные переменные.
Следует применять их как можно реже.

Следует хранить значения в глобальном объекте, только если они действительно глобальны
для нашего проекта, и стараться свести их количество к минимуму.
*/

//_ Использование для полифилов

/*
Глобальный объект можно использовать, чтобы проверить поддержку
современных возможностей языка:
*/

if (!window.Promise) {
  console.log('Ваш браузер очень старый!');
}

/* 
Таким образом, мы можем создать полифил: добавить функции,
которые не поддерживаются окружением, но существуют в современном стандарте.
*/

if (!window.Promise) {
  // window.Promise = ... // собственная реализация современной возможности языка
}

// * итог

/* 
1. Глобальный объект хранит переменные, которые должны быть доступны в любом месте программы.

Это включает в себя как встроенные объекты, например, Array, так и характерные для окружения свойства,
например, window.innerHeight – высота окна браузера.

2. Глобальный объект имеет универсальное имя – globalThis.

…Но чаще на него ссылаются по-старому, используя имя, характерное для данного окружения,
такое как window (браузер) и global (Node.js).

3. Следует хранить значения в глобальном объекте, только если они действительно
глобальны для нашего проекта. И стараться свести их количество к минимуму.

4. В браузерах, если только мы не используем модули, глобальные функции и переменные,
объявленные с помощью var, становятся свойствами глобального объекта.

5. Для того, чтобы код был проще и в будущем его легче было поддерживать,
следует обращаться к свойствам глобального объекта напрямую, как window.x.
*/
