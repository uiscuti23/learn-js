// * Остаточные параметры

/* 
Вызывать функцию можно с любым количеством аргументов независимо от того,
как она была определена.
*/

function sum(a, b) {
  return a + b;
}
alert(sum(1, 2, 3, 4, 5));

/* 
Лишние аргументы не вызовут ошибку. Но, конечно, посчитаются только первые два.

Остаточные параметры могут быть обозначены через три точки ....
Буквально это значит: «собери оставшиеся параметры и положи их в массив».
*/

function sumAll(...args) {
  let sum = 0;

  for (let arg of args) sum += arg;

  return sum;
}

alert(sumAll(1)); // 1
alert(sumAll(1, 2)); // 3

/*
Мы можем положить первые несколько параметров в переменные, а остальные – собрать в массив.
*/

function showName(firstName, lastName, ...titles) {
  alert(firstName + ' ' + lastName); // 'Юлий Цезарь'
  alert(titles); // ['Консул', 'Император']
}

showName('Юлий', 'Цезарь', 'Консул', 'Император');

/* 
Остаточные параметры должны располагаться в конце. Остаточные параметры собирают все
остальные аргументы, поэтому бессмысленно писать что-либо после них. Это вызовет ошибку
*/

//_ Переменная "arguments"

/* 
Все аргументы функции находятся в псевдомассиве arguments под своими порядковыми номерами
*/

function showName() {
  alert(arguments); // ['mercury', 'venus', callee: ƒ, Symbol(Symbol.iterator): ƒ]
  alert(Array.from(arguments)); // ['mercury', 'venus']
}

showName('mercury', 'venus');

/* 
Arguments похож на массив, и его тоже можно перебирать, это всё же не массив. 
Он не поддерживает методы массивов, но мы можем его преобразовать в массив
с помощью Array.from

Стрелочные функции не имеют "arguments". Если мы обратимся к arguments из стрелочной функции,
то получим аргументы внешней «нормальной» функции.
*/

// * Оператор расширения

/* 
Оператор расширения похож на остаточные параметры, но делает противоположное действие:
"раскрывает" или "расширяет" массив в список аргументов
*/

let arr = [3, 5, 1];

alert(Math.max(...arr)); // 5

// Можно передать несколько итерируемых объектов:

let arr1 = [1, -2, 3, 4];
let arr2 = [8, 3, -8, 1];

alert(Math.max(1, ...arr1, ...arr2, 7)); // 8

// Можно использовать для слияния массивов:

let array = [3, 5, 1];
let array2 = [8, 9, 15];

let merged = [0, ...array, 2, ...array2];

alert(merged); // 0,3,5,1,2,8,9,15 (0, затем arr, затем 2, в конце arr2)

// Работает с любым перебираемым(итерируемым) объектом

let str = 'Привет';
alert([...str]); // ['П', 'р', 'и', 'в', 'е', 'т']

/*
Оператор расширения использует итераторы, чтобы перебрать элементы, анологично циклу for..of.
Получившиеся элементы собираются в массив при помощи стандартного объявления массива: [...str].

Этот метод похож на Array.from:
*/

let string = 'Привет';

// Array.from преобразует перебираемый объект в массив
alert(Array.from(string)); // ['П', 'р', 'и', 'в', 'е', 'т']

/* 
Оператор расширения работает только с итерируемыми объектами,
а Array.from работает как с псевдомассивами, так и с итерируемыми объектами
*/

// * итог

/* 
Когда мы видим "..." в коде, это могут быть как остаточные параметры, так и оператор расширения.

Как отличить их друг от друга:

- если ... располагается в конце списка параметров функции, то это «остаточные параметры».
Он собирает остальные неуказанные аргументы и делает из них массив.

- если ... встретился в вызове функции или где-либо ещё, то это «оператор расширения».
Он извлекает элементы из массива.

Полезно запомнить:

- остаточные параметры используются, чтобы создавать новые функции с неопределённым числом аргументов.
- с помощью оператора расширения можно вставить массив в функцию, которая по умолчанию работает
с обычным списком аргументов.

Вместе эти конструкции помогают легко преобразовывать наборы значений в массивы и обратно.

К аргументам функции можно обращаться и по-старому — через псевдомассив arguments.
*/
