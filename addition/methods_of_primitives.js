// * Методы примитивов

/* 
Примитивы не являются объектами. JavaScript позволяет нам работать с ними,
как будто они являются объектами. У них есть методы. 
*/

//_ Примитив как объект

/* 
Язык позволяет осуществлять доступ к методам и свойствам строк, чисел,
булевых значений и символов.

Чтобы это работало, при таком доступе создаётся специальный «объект-обёртка»,
который предоставляет нужную функциональность, а после удаляется.

Каждый примитив имеет свой собственный «объект-обёртку»,
которые называются: String, Number, Boolean, Symbol и BigInt (но не null и undefined).

Таким образом, они имеют разный набор методов.
*/

/* 
К примеру, существует метод str.toUpperCase(), который возвращает строку в верхнем регистре.
Вот, как он работает:
*/

let str = 'Привет';

alert(str.toUpperCase()); // 'ПРИВЕТ'

/* 
Вот, что происходит в str.toUpperCase():

1. Строка str – примитив. В момент обращения к его свойству,
создаётся специальный объект, который знает значение строки
и имеет такие полезные методы, как toUpperCase().

2. Этот метод запускается и возвращает новую строку (показывается в alert).

3. Специальный объект удаляется, оставляя только примитив str.

Получается, что примитивы могут предоставлять методы,
и в то же время оставаться «лёгкими».

Объекты «тяжелее» примитивов.
Они нуждаются в дополнительных ресурсах для поддержания внутренней структуры.
*/

/* 
Не используйте оператор new для создания примитивов!
Конструкторы String/Number/Boolean нужно вызывать без оператора new.

Случай явного создания «объекта-обёртки», к примеру, для чисел
при помощи синтаксиса как new Number(1):
*/

alert(typeof 0); // 'число'
alert(typeof new Number(0)); // 'object'!

let zero = new Number(0);

if (zero) {
  // zero возвращает "true", так как является объектом
  alert('zero имеет «истинное» значение?!?');
}

/* 
Использование функций String/Number/Boolean без оператора new –
вполне разумно и полезно.

Они превращают значение в соответствующий примитивный тип:
*/

let num = Number('123'); // превращает строку в число

/* 
Особенные примитивы null и undefined являются исключениями.
У них нет соответствующих «объектов-обёрток», и они не имеют никаких методов.

Попытка доступа к свойствам такого значения возвратит ошибку:
*/

alert(null.test); // ошибка

// * Итого

/* 
Все примитивы, кроме null и undefined, предоставляют множество полезных методов.

Формально эти методы работают с помощью временных объектов,
но движки JavaScript внутренне очень хорошо оптимизируют этот процесс,
так что их вызов не требует много ресурсов.
*/
