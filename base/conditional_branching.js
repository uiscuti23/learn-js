// * Условное ветвление: if, '?'

/*
Если нам нужно выполнить действия в зависимости от условий,
то мы можем использовать: 

- инструкцию if
- условный оператор ? («вопросительный знак» или «тернарный»)
- конструкцию switch
*/

//_ Инструкция "if"

/*
Инструкция if(...) вычисляет условие в скобках,
преобразуя результат к логическому типу.

0, "", null, undefined и NaN станут false.

Все остальные значения станут true, что приведет
к выполнению блока кода внутри инструкции if
*/

if (year == 2024) alert('Вы правы!');

/*
Также можно передать заранее вычесленное в переменной
логическое значение в if, например:
*/
let condition = year == 2024; // преобразуется к true или false

if (condition) {
  // ...
}

//_ Блок "else"

/*
Инструкция if может содержать необязательный блок «else» («иначе»).
Он выполняется, когда условие ложно.
*/

if (5 < 1) {
  alert('5 меньше 1');
} else {
  alert('5 больше 1'); // выполнятся инструкции внутри блока else
}

//_ Несколько условий: "else if"

/*
Используется, если нужно проверить несколько вариантов условия
*/

let year = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');

if (year < 2015) {
  alert('Это слишком рано...');
} else if (year > 2015) {
  alert('Это поздновато');
} else {
  alert('Верно!');
}

/* 
В цепочке конструкций if () - else if () - ... - else выполнится тот блок кода,
условие которого первым вернет true. Проверки последующих условий не произойдут.

Если все условия вернут false, то выполнится блок кода else (если он присутсвует)
*/

//_ Условный оператор "?"

/* 
Используется, если нужно определить переменную в зависимости от условия.

Оператор представлен знаком вопроса ?. Его также называют «тернарный»,
так как этот оператор, единственный в своём роде, имеет три аргумента:

` let result = условие ? значение1 : значение2

- вычисляется условие
- если условие истинно, возвращается первое значение
- если ложно, возвращается второе значение
*/

/* 
Условный оператор "?" позволяет нам определить переменную более коротким
и простым способом, нежели инструкция if:
*/

// Пример с if:

let accessAllowed;
let age = 20;

if (age > 18) {
  accessAllowed = true;
} else {
  accessAllowed = false;
}

// Пример с "?":

let user_age = 20;
let access_allowed = user_age > 18 ? true : false;

/* 
Пример с несколькими операторами:

let yourAge = prompt('Возраст?', 18);

let message =
  (yourAge < 3) ? 'Здравствуй, малыш!' :
	(yourAge < 18) ? 'Привет!' :
	(yourAge < 100) ? 'Здравствуйте!' :
	'Какой необычный возраст!';
*/

// Нетрадиционное использование "?"
/* 
Иногда оператор «вопросительный знак» ? используется в качестве замены if
*/

let company = prompt('Какая компания создала JavaScript?', '');

company == 'Netscape' ? alert('Верно!') : alert('Неправильно.');

/* 
Не рекомендуется использовать оператор вопросительного знака таким образом.
Несмотря на то, что такая запись короче, чем эквивалентная инструкция if, она хуже читается.
*/

// Дополнительно

//_ Конструкция "switch"

/* 
Конструкция switch заменяет собой сразу несколько if.

Она имеет один или более блок case и необязательный блок default:

switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break]

  case 'value2':  // if (x === 'value2')
    ...
    [break]

  default:
    ...
    [break]
}
*/

// Пример использования switch (выполнится alert('В точку!')):

let a = 2 + 2;

switch (a) {
  case 3:
    alert('Маловато');
    break;
  case 4: // совпадение найдено
    alert('В точку!'); // выполнятся все инструкции
    break; // до break
  case 5:
    alert('Перебор');
    break;
  default:
    alert('Нет таких значений');
}

/* 
Оператор switch последовательно сравнит a со всеми вариантами из case, ища совпадения.

Если совпадение найдено, будет выполнен код под найденным вариантом до ближайшего break,
который прервет выполнение.

Если ближайшего break нет, то выполнение пойдёт ниже по следующим case,
игнорируя их проверки, пока не найдет break.

Если ни один case не совпал – выполняется (если есть) вариант default.

Значения switch и case должны быть одного типа, чтобы выполнялось равенство (строгая проверка).
*/

// Пример без break:

let b = 2 + 2;

switch (b) {
  case 3:
    alert('Маловато');
  case 4: // найдено совпадение
    alert('В точку!');
  case 5:
    alert('Перебор');
  default:
    alert('Нет таких значений');
}

/* 
В примере выше последовательно выполнятся три alert:

alert('В точку!')
alert('Перебор')
alert('Нет таких значений')
*/

// Любое выражение может быть аргументом для switch/case:

let c = '1';
let d = 0;

switch (+c) {
  case d + 1:
    alert('Выполнится, т.к. значением +c будет 1, что в точности равно d+1');
    break;

  default:
    alert('Это не выполнится');
}

// Группировка «case»

// Несколько вариантов case, использующих один код, можно группировать:

let f = 3;

switch (f) {
  case 4:
    alert('Правильно!');
    break;

  case 3: // группируем оба case
  case 5:
    alert('Неправильно!');
    alert('Может вам посетить урок математики?');
    break; // выполнение кода остановится здесь

  default:
    alert('Результат выглядит странновато. Честно.');
}

/* 
Варианты 3 и 5 выводят одно сообщение, так как в case 3 отсутствует break.
*/

// Пример использования конструкции "switch" для определения значения переменной:

const memberStatus = 'diamond';
let discount;

switch (memberStatus) {
  case 'vip':
    discount = 0.25;
    break;
  case 'diamond':
    discount = 0.2;
    break;
  case 'gold':
  case 'silver':
    discount = 0.1;
    break;
  default:
    discount = 0;
    break;
}

/* 
Рекомендутся ставить break в конце каждого case.
Такой код будет хорошо читаться и не приведёт к неожиданным багам.

К примеру, если убрать break после case 'diamond',
значение для discount будет установлено в 0.1 вместо 0.2

Также рекомендуется добавлять default блок к switch.

Если в switch меньше трёх case, то if...else будет читаться проще.
*/

/* 
Если внутри case нужно создать переменную, то придётся добавить фигурные скобки,
иначе JavaScript упадёт с ошибкой:
*/

switch (variable) {
  case 5: {
    const myVar = 'Hello';
  }
}
